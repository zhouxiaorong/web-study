

_______________________________________ 第一章 Loading and Execution 加载和运行 start _______________________________________
1. 将脚本放在底部
2. 一个标签加载将多个js文件
   这些文件在服务器上是两个分离的文件，但是当服务器收到此 URL 请求时，两个文件将被合并在一起返回给客户端
    例：
          <script type="text/javascript" src="http://yui.yahooapis.com/combo?2.7.0/build/yahoo/yahoo-min.js&2.7.0/build/event/event-min.js"></script>
3. 为<script>标签添加 defer 属性（只适用于 Internet Explorer 和 Firefox 3.5 以上版本）
    这个 defer 属性指明元素中所包含的脚本不打算修改 DOM，因此代码可以稍后执行，这意味着在 window 的 load 事件发出之后开始下载代码）
    说明：
      1. 部分浏览器不支持，忽略 defer 属性
      2. 一个带有 defer 属性的<script>标签可以放置在文档的任何位置。对应的 JavaScript 文件将在<script>被解析时启动下载，但代码不会被执行，直到 DOM 加载完成（在 onload 事件句柄被调用之前）。当一个 defer 的 JavaScript 文件被下载时，它不会阻塞浏览器的其他处理过程，所以这些文件可以与页面的其他资源一起并行下载。
    例：
      <script type="text/javascript" src="file1.js" defer></script>

4. Dynamic Script Elements 动态脚本元素
  通过 dom 函数创建，例：
    var script = document.createElement ("script");
    script.type = "text/javascript";
    script.src = "file1.js";
    document.getElementsByTagName_r("head")[0].appendChild(script);

用 XHR 对象下载代码，并注入到页面中
_______________________________________ 第一章 Loading and Execution 加载和运行 end _______________________________________
